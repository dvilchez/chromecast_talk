<script type="text/javascript" src="https://www.gstatic.com/cv/js/sender/v1/cast_sender.js"></script>

componentDidMount: function(){
    window.__onGCastApiAvailable = function(loaded, errorInfo){
        if(loaded){
            var sessionRequest = new chrome.cast.SessionRequest(chrome.cast.media.DEFAULT_MEDIA_RECEIVER_APP_ID);
            var apiConfig = new chrome.cast.ApiConfig(sessionRequest,
                this.sessionListener,
                this.receiverListener);
            chrome.cast.initialize(apiConfig, function(){ console.log('init success'); }, function(){ console.log('init error'); }) ;
        }else{
            console.log(errorInfo);
        }
    }.bind(this);
},

sessionListener: function(e) {
},

receiverListener: function(){
},

if( e === chrome.cast.ReceiverAvailability.AVAILABLE) {
  }

chrome.cast.requestSession(function(e){this.setState({session: e});}.bind(this), function(){ console.log('cast error');});

play: function(){
    if(this.state.session && this.state.session.status == chrome.cast.SessionStatus.CONNECTED){
        if(this.state.currentMedia){
            this.state.currentMedia.play(null,null,logError);
        }else{
            this.loadMedia();
        }
    }else{
        this.refs.video.getDOMNode().play();
    }        
},

pause: function(){

},

var mediaInfo = new chrome.cast.media.MediaInfo(currentMediaURL);
var request = new chrome.cast.media.LoadRequest(mediaInfo);
session.loadMedia(request,
   onMediaDiscovered.bind(this, 'loadMedia'),
   onMediaError);

function onMediaDiscovered(how, media) {
   currentMedia = media;
   media.addUpdateListener(this.onMediaStatusUpdate);
}


onMediaStatusUpdate: function(status){
    if(!status){
         this.setState({currentMedia: undefined});
         this.refs.play.getDOMNode().innerText = 'Play';
         this.setState({paused: true});
    }
},

sessionListener: function(e) {
  this.setState({session: e});
  if (e.media.length != 0) {
    this.setState({currentMedia: e.media[0]});
  }
},


function stopApp() {
  session.stop(onSuccess, onError);
}

==============================

//www.gstatic.com/cast/sdk/libs/receiver/2.0.0/cast_receiver.js

https://cast.google.com/publish/#/overview

window.castReceiverManager = cast.receiver.CastReceiverManager.getInstance();
    window.castReceiverManager.start();

http://RECEIVER-IP-ADDRESS:9222
cast.receiver.logger.setLevelValue(cast.receiver.LoggerLevel.DEBUG);
debugger;
window.location.reload(true);


var customMessageBus = castReceiverManager.getCastMessageBus('urn:x-cast:super.awesome.example');
customMessageBus.onMessage = function(event) {
   // Handle message
}

eval('('+this.data+')')

 function sendMessage(dir, acc){
            data[dir] = acc;
            session.sendMessage('urn:x-cast:com.xuaps.retrogame', data, log, log);
        }
window.castReceiverManager.onSenderDisconnected = function(event) {
  if(window.castReceiverManager.getSenders().length == 0 &&
    event.reason == cast.receiver.system.DisconnectReason.REQUESTED_BY_SENDER) {
      window.close();
  }
}


        this.customMessageBus.broadcast('GREAT!');

                    session.addMessageListener('urn:x-cast:com.xuaps.retrogame', showMessage);
        function showMessage(namespace, message){
            document.getElementById('messages').value=message;
        }

cordova create gamecast

cordova platform add android

cordova run

cordova plugin add https://github.com/GetVideostream/cordova-chromecast.git

document.addEventListener('deviceready', onDeviceReady, false);

if (!chrome.cast || !chrome.cast.isAvailable) {
  setTimeout(initializeCastApi, 1000);
}

=========================


$.ajax({
       type: "HEAD",
       async: true,
       url: imageTemp[i],
       success: function(message,text,response){
           imageData.push([imageTemp[i], response.getResponseHeader('Content-Length')]);
       }
   });
